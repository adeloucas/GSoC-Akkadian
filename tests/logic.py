__author__ = ['Andrew Deloucas <ADeloucas@g.harvard.com>']
__license__ = 'MIT License. See LICENSE.'

import os
import unittest
import re

class ATFConverter(object): 

    def convert(self, text):

        tittles =  [(r's,', '·π£'),  (r'S,', '·π¢'), (r't,', '·π≠'), (r'T,', '·π¨'), (r'sz', '≈°'), (r'SZ', '≈†')]
        
        accents =  [(r'[aA]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])2', '√°\\1'), 
                        (r'[aA]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])3', '√†\\1'),
                        (r'[aA]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])2', '√°\\1'),
                        (r'[aA]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])3', '√†\\1'),
                        (r'[aA]'r'([a-zA-Z][aeiouAEIOU])2', '√°\\1'), 
                        (r'[aA]'r'([a-zA-Z][aeiouAEIOU])3', '√†\\1'),
                        (r'[aA]2', '√°'), (r'[aA]3', '√†'), (r'[aA]([a-zA-Z])2', '√°\\1'), (r'[aA]([a-zA-Z])3', '√†\\1'), 
                        (r'[aA]([sStT])([zZ,])2', '√°\\1\\2'), (r'[aA]([sStT])([zZ,])3', '√†\\1\\2'),
                
                        (r'[eE]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])2', '√©\\1'), 
                        (r'[eE]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])3', '√®\\1'),
                        (r'[eE]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])2', '√©\\1'),
                        (r'[eE]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])3', '√®\\1'),
                        (r'[eE]'r'([a-zA-Z][aeiouAEIOU])2', '√©\\1'), 
                        (r'[eE]'r'([a-zA-Z][aeiouAEIOU])3', '√®\\1'),
                        (r'[eE]2', '√©'), (r'[eE]3', '√®'), (r'[eE]([a-zA-Z])2', '√©\\1'), (r'[eE]([a-zA-Z])3', '√®\\1'),
                        (r'[eE]([sStT])([zZ,])2', '√©\\1\\2'), (r'[eE]([sStT])([zZ,])3', '√®\\1\\2'),
                        
                        (r'[iI]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])2', '√≠\\1'), 
                        (r'[iI]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])3', '√¨\\1'),
                        (r'[iI]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])2', '√≠\\1'),
                        (r'[iI]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])3', '√¨\\1'),
                        (r'[iI]'r'([a-zA-Z][aeiouAEIOU])2', '√≠\\1'), 
                        (r'[iI]'r'([a-zA-Z][aeiouAEIOU])3', '√¨\\1'),
                        (r'[iI]2', '√≠'), (r'[iI]3', '√¨'), (r'[iI]([a-zA-Z])2', '√≠\\1'), (r'[iI]([a-zA-Z])3', '√¨\\1'),
                        (r'[iI]([sStT])([zZ,])2', '√≠\\1\\2'), (r'[iI]([sStT])([zZ,])3', '√¨\\1\\2'),
                        
                        (r'[oO]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])2', '√≥\\1'), 
                        (r'[oO]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])3', '√≤\\1'),
                        (r'[oO]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])2', '√≥\\1'),
                        (r'[oO]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])3', '√≤\\1'),
                        (r'[oO]'r'([a-zA-Z][aeiouAEIOU])2', '√≥\\1'), 
                        (r'[oO]'r'([a-zA-Z][aeiouAEIOU])3', '√≤\\1'),
                        (r'[oO]2', '√≥'), (r'[oO]3', '√≤'), (r'[oO]([a-zA-Z])2', '√≥\\1'), (r'[oO]([a-zA-Z])3', '√≤\\1'),
                        (r'[oO]([sStT])([zZ,])2', '√≥\\1\\2'), (r'[oO]([sStT])([zZ,])3', '√≤\\1\\2'),
                        
                        (r'[uU]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])2', '√∫\\1'), 
                        (r'[uU]([a-zA-Z][aeiouAEIOU][a-zA-Z][aeiouAEIOU])3', '√π\\1'),
                        (r'[uU]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])2', '√∫\\1'),
                        (r'[uU]'r'([a-zA-Z][aeiouAEIOU][a-zA-Z])3', '√π\\1'),
                        (r'[uU]([a-zA-Z][aeiouAEIOU])2', '√∫\\1'), 
                        (r'[uU]([a-zA-Z][aeiouAEIOU])3', '√π\\1'),
                        (r'[uU]2', '√∫'), (r'[uU]3', '√π'), (r'[uU]([a-zA-Z])2', '√∫\\1'), (r'[uU]([a-zA-Z])3', '√π\\1'),
                        (r'[uU]([sStT])([zZ,])2', '√∫\\1\\2'), (r'[uU]([sStT])([zZ,])3', '√π\\1\\2'),

                        (r'([a-zA-Z])4', '\\1‚ÇÑ'), (r'([a-zA-Z])5', '\\1‚ÇÖ'), (r'([a-zA-Z])6', '\\1‚ÇÜ'), 
                        (r'([a-zA-Z])7', '\\1‚Çá'), (r'([a-zA-Z])8', '\\1‚Çà'), (r'([a-zA-Z])9', '\\1‚Çâ'), 
                        (r'([a-zA-Z])10', '\\1‚ÇÅ‚ÇÄ'), (r'([a-zA-Z])11', '\\1‚ÇÅ‚ÇÅ'), (r'([a-zA-Z])12', '\\1‚ÇÅ‚ÇÇ'), 
                        (r'([a-zA-Z])13', '\\1‚ÇÅ‚ÇÉ'), (r'([a-zA-Z])14', '\\1‚ÇÅ‚ÇÑ'), (r'([a-zA-Z])15', '\\1‚ÇÅ‚ÇÖ'), 
                        (r'([a-zA-Z])16', '\\1‚ÇÅ‚ÇÜ'),(r'([a-zA-Z])17', '\\1‚ÇÅ‚Çá'), (r'([a-zA-Z])18', '\\1‚ÇÅ‚Çà')]
        
        determinatives = [(r'{d}', '·µà'), (r'{di≈°}', 'íÅπ'),(r'{disz}', 'íÅπ'), (r'{ge≈°}', '·µç·µâÀ¢·∂ª'), (r'{gesz}', '·µç·µâÀ¢·∂ª'),
                          (r'{iri}', '‚Å± ≥‚Å±'), (r'{ki}', '·µè‚Å±'), (r'{ku≈°}', '·µè·∂∏À¢·∂ª'), (r'{nisi}', '‚Åø‚Å±À¢‚Å±'),  (r'{uruda}', '·µò ≥·µò·µà·µÉ'),
                          (r'{lu2}', 'À°·∂∏¬≤'), (r'{l√∫}', 'À°·∂∏¬≤'), (r'{munus}', '·µê·∂∏‚Åø·∂∏À¢'), (r'{≈°e}', 'À¢·∂ª·µâ'), (r'{uzu}', '·∂∏·∂ª·∂∏'),
                          (r'\(u\)', '(íåã)'), (r'\(di≈°\)', '(íÅπ)'),(r'\(disz\)', '(íÅπ)'), (r'{sze}', 'À¢·∂ª·µâ'), 
                          (r'{kusz}', '·µè·∂∏À¢·∂ª'),  (r'{ansze}', '·µÉ‚ÅøÀ¢·∂ª·µâ'),  (r'{esz2}', '·µâÀ¢·∂ª¬≤'),  (r'{gi}', '·µç‚Å±'),
                          (r'{is}', '‚Å±À¢'), (r'{i‚Çá}', '‚Å±‚Å∑'), (r'{I‚Çá}', '‚Å±‚Å∑')]

#        sumerian = str([(r'[\_]\w*[\_]'),
#                        (r'[\_]\w*[\s-]\w*[\_]'),
#                        (r'[\_]\w*[\s-]\w*[\s-]\w*[\_]'),
#                        (r'[\_]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\_]'),
#                        (r'[\_]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\_]'),
#                        (r'[\_]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\_]'),   
#                        (r'[\_]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\_]')])
#        SUMERIAN = sumerian.upper()

#        AKKADIAN = str([(r'[\_][\s-]\w*[\s-][\_]'),
#                        (r'[\_][\s-]\w*[\s-]\w*[\s-][\_]'),
#                        (r'[\_][\s-]\w*[\s-]\w*[\s-]\w*[\s-][\_]'),
#                        (r'[\_][\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-][\_]'),
#                        (r'[\_][\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]'),
#                        (r'[\_][\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-]\w*[\s-][\_]')])
#        akkadian = AKKADIAN.lower()

        self.tittles = \
                [(re.compile(regex), repl) for (regex, repl) in tittles]
        
        self.accents = \
                [(re.compile(regex), repl) for (regex, repl) in accents]

        self.determinatives = \
                [(re.compile(regex), repl) for (regex, repl) in determinatives]
        
#        self.sumerian = \
#                [(re.compile(regex), repl) for (regex, repl) in sumerian]

#        self.AKKADIAN = \
#                [(re.compile(regex), repl) for (regex, repl) in AKKADIAN]   
        
        for (pattern, repl) in self.tittles:
            text = re.subn(pattern, repl, str(text))[0]

        for (pattern, repl) in self.accents:
            text = re.subn(pattern, repl, str(text))[0]

        for (pattern, repl) in self.determinatives:
            text = re.subn(pattern, repl, str(text))[0]    
    
        #for sumerian in re.finditer(sumerian, text):

#        for (pattern, repl) in self.sumerian:
#            text = re.subn(pattern, repl, str(text))[0]

#        for (pattern, repl) in self.AKKADIAN:
#            text = re.sub(AKKADIAN, akkadian, str(text))
        
        return text     